package com.bory.company.dao;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.bory.company.dto.Employee;
import static com.bory.company.dao.DTOFactory.*;
import static com.bory.company.dao.DataResourceCloser.*;

public class CompanyDAOImpl implements CompanyDAO {

	protected final Connection connection;

	public CompanyDAOImpl(Connection connection) {
		this.connection = connection;
	}

	@Override
	public int insert(Employee employee) {

		System.out.println("insert da에 진입");
		PreparedStatement statement = null;
		int successed;

		try {
			statement = connection.prepareStatement(QueryFactory.getQuery("insert"));
			successed = fromEmployee(statement, employee).executeUpdate();
		} catch (SQLException e) {
			successed = 0;
		} finally {
			close(statement);
		}

		return successed;
	}

	@Override
	public int update(Employee employee) {
		
		PreparedStatement statement = null;
		int successed = 0;;
		try{
			statement = connection.prepareStatement(QueryFactory.getQuery("update"));

			statement.setString(1, employee.getJob());
			statement.setInt(2, employee.getMgr());
			statement.setInt(3, employee.getSal());
			statement.setInt(4, employee.getComm());
			statement.setInt(5, employee.getDeptNo());
			statement.setInt(6, employee.getEmpNo());

			successed = statement.executeUpdate();

		} catch (SQLException e) {
		}
		return successed;
	}

	@Override
	public List<Employee> findAll() {

		List<Employee> list = new ArrayList<Employee>();

		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			statement = connection.prepareStatement(QueryFactory.getQuery("findAll"));
			rs = statement.executeQuery();

			while (rs.next()) {
				list.add(fromResultSet(rs, Employee.class));
			}

		} catch (Exception e) {

		} finally {
			close(rs, statement);
		}

		return list;
	}

	@Override
	public List<Employee> findSome(String findOption) {
		
		System.out.println("02. dao진입"+findOption);
		String[] option = findOption.split("/");
		System.out.println(option[0]);
		System.out.println(option[1]);
		List<Employee> list = new ArrayList<>();
		PreparedStatement statement = null;
		ResultSet rs = null;
		
		try {
			statement = connection.prepareStatement(QueryFactory.getQuery(option[0]));
			statement.setString(1, option[1]);
			rs = statement.executeQuery();
			
			while(rs.next()) {
				list.add(fromResultSet(rs, Employee.class));
			}
			
		}catch(Exception e) {
			
		}
		
		return list;
	}

	@Override
	public Employee findOne(int empNo) {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Employee employee = new Employee();

		try {

			pstmt = connection.prepareStatement(QueryFactory.getQuery("findOne"));
			pstmt.setInt(1, empNo);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				employee.setEmpNo(rs.getInt("EMPNO"));
				employee.seteName(rs.getString("ENAME"));
				employee.setJob(rs.getString("JOB"));
				employee.setMgr(rs.getInt("MGR"));
				employee.setHireDate(rs.getDate("HIREDATE"));
				employee.setSal(rs.getInt("SAL"));
				employee.setComm(rs.getInt("COMM"));
				employee.setDeptNo(rs.getInt("DEPTNO"));
			}
		} catch (Exception e) {

		} finally {
			close(rs, pstmt);
		}
		return employee;
	}

	@Override
	public int count() {
		return 0;
	}

}
